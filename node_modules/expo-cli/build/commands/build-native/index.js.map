{"version":3,"sources":["../../../src/commands/build-native/index.ts"],"names":["buildAction","projectDir","options","platform","Object","values","Platform","includes","Error","user","UserManager","ensureLoggedInAsync","builder","Builder","buildArtifactUrl","buildProject","statusAction","result","getLatestBuilds","builds","program","command","description","option","asyncActionProjectDir","checkConfig","asyncAction"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,eAAeA,WAAf,CAA2BC,UAA3B,EAA+CC,OAA/C,EAAiE;AAC/D,MAAI,CAACA,OAAO,CAACC,QAAT,IAAqB,CAACC,MAAM,CAACC,MAAP,CAAcC,sBAAd,EAAwBC,QAAxB,CAAiCL,OAAO,CAACC,QAAzC,CAA1B,EAA8E;AAC5E,UAAM,IAAIK,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,QAAMC,IAAU,GAAG,MAAMC,mBAAYC,mBAAZ,EAAzB;AACA,QAAMC,OAAO,GAAG,KAAIC,kBAAJ,EAAYJ,IAAZ,CAAhB;AACA,QAAMK,gBAAgB,GAAG,MAAMF,OAAO,CAACG,YAAR,CAAqBd,UAArB,EAAiCC,OAAjC,CAA/B;AACA,sBAAK,iBAAgBY,gBAAiB,EAAtC;AACD;;AAED,eAAeE,YAAf,GAA8B;AAC5B,QAAMP,IAAU,GAAG,MAAMC,mBAAYC,mBAAZ,EAAzB;AACA,QAAMC,OAAO,GAAG,KAAIC,kBAAJ,EAAYJ,IAAZ,CAAhB;AACA,QAAMQ,MAAM,GAAG,MAAML,OAAO,CAACM,eAAR,EAArB;AACA,gCAAgBD,MAAM,CAACE,MAAvB;AACD;;AAEc,kBAAUC,OAAV,EAA4B;AACzCA,EAAAA,OAAO,CACJC,OADH,CACW,qBADX,EAEGC,WAFH,CAGI,6GAHJ,EAKGC,MALH,CAKU,0BALV,EAKsC,yBALtC,EAKiE,kBALjE,EAMGC,qBANH,CAMyBxB,WANzB,EAMsC;AAAEyB,IAAAA,WAAW,EAAE;AAAf,GANtC;AAQAL,EAAAA,OAAO,CACJC,OADH,CACW,cADX,EAEGC,WAFH,CAEgB,uDAFhB,EAGGI,WAHH,CAGeV,YAHf,EAG6B;AAAES,IAAAA,WAAW,EAAE;AAAf,GAH7B;AAID","sourcesContent":["import { BuildType, Platform } from '@expo/build-tools';\nimport { User, UserManager } from '@expo/xdl';\nimport { Command } from 'commander';\n\nimport log from '../../log';\nimport Builder, { Options } from './Builder';\nimport { printBuildTable } from './utils';\n\nasync function buildAction(projectDir: string, options: Options) {\n  if (!options.platform || !Object.values(Platform).includes(options.platform)) {\n    throw new Error('Pass valid platform: [android|ios]');\n  }\n  const user: User = await UserManager.ensureLoggedInAsync();\n  const builder = new Builder(user);\n  const buildArtifactUrl = await builder.buildProject(projectDir, options);\n  log(`Artifact url: ${buildArtifactUrl}`);\n}\n\nasync function statusAction() {\n  const user: User = await UserManager.ensureLoggedInAsync();\n  const builder = new Builder(user);\n  const result = await builder.getLatestBuilds();\n  printBuildTable(result.builds);\n}\n\nexport default function (program: Command) {\n  program\n    .command('build [project-dir]')\n    .description(\n      'Build an app binary for your project, signed and ready for submission to the Google Play Store / App Store.'\n    )\n    .option('-p --platform <platform>', 'Platform: [android|ios]', /^(android|ios)$/i)\n    .asyncActionProjectDir(buildAction, { checkConfig: true });\n\n  program\n    .command('build:status')\n    .description(`Get the status of the latest builds for your project.`)\n    .asyncAction(statusAction, { checkConfig: true });\n}\n"],"file":"index.js"}