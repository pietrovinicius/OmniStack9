"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _os() {
  const data = _interopRequireDefault(require("os"));

  _os = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _buildTools() {
  const data = require("@expo/build-tools");

  _buildTools = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _axios() {
  const data = _interopRequireDefault(require("axios"));

  _axios = function () {
    return data;
  };

  return data;
}

function _concatStream() {
  const data = _interopRequireDefault(require("concat-stream"));

  _concatStream = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _promise() {
  const data = _interopRequireDefault(require("md5-file/promise"));

  _promise = function () {
    return data;
  };

  return data;
}

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _uuid() {
  const data = require("uuid");

  _uuid = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Builder {
  constructor(user) {
    _defineProperty(this, "client", void 0);

    this.client = _xdl().ApiV2.clientForUser(user);
  }

  async buildProject(projectDir, options) {
    const tarPath = _path().default.join(_os().default.tmpdir(), `${(0, _uuid().v4)()}.tar.gz`);

    try {
      await (0, _utils().makeProjectTarball)(tarPath);
      const spinner = (0, _ora().default)('Uploading project to server.').start();
      const checksum = await (0, _promise().default)(tarPath);
      const {
        presignedUrl
      } = await this.client.postAsync('upload-sessions', {
        type: 'turtle-project-sources',
        checksum
      });
      const publicUrl = await uploadWithPresignedURL(presignedUrl, tarPath);
      spinner.succeed('Project uploaded.');
      const job = await (0, _buildTools().prepareJob)(options.platform, publicUrl, projectDir);
      const {
        buildId
      } = await this.client.postAsync('builds', {
        job: job
      });
      return await (0, _utils().waitForBuildEnd)(this.client, buildId);
    } finally {
      await _fsExtra().default.remove(tarPath);
    }
  }

  async getLatestBuilds() {
    return await this.client.getAsync('builds');
  }

}

exports.default = Builder;

async function uploadWithPresignedURL(presignedPost, file) {
  const fileStream = _fsExtra().default.createReadStream(file);

  const form = new (_xdl().FormData)();

  for (const [fieldKey, fieldValue] of Object.entries(presignedPost.fields)) {
    form.append(fieldKey, fieldValue);
  }

  form.append('file', fileStream);

  try {
    const buffer = await new Promise(resolve => {
      form.pipe((0, _concatStream().default)({
        encoding: 'buffer'
      }, data => resolve(data)));
    });
    const result = await _axios().default.post(presignedPost.url, buffer, {
      headers: form.getHeaders(),
      maxContentLength: Infinity
    });
    return String(result.headers.location);
  } catch (err) {
    err.message = err.body ? `${err.message}\n${err.body}` : err.message;
    console.log(err.response);
    throw err;
  }
}
//# sourceMappingURL=Builder.js.map