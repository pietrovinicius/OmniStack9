{"version":3,"sources":["../../../src/commands/fetch/android.ts"],"names":["maybeRenameExistingFile","projectDir","filename","desiredFilePath","path","resolve","fs","pathExists","num","rename","fetchAndroidKeystoreAsync","ctx","Context","init","keystoreFilename","manifest","slug","backupKeystoreOutputPath","view","DownloadKeystore","fetch","save","fetchAndroidHashesAsync","outputPath","AndroidCredentials","logKeystoreHashes","keystorePath","keystorePassword","credentials","keyAlias","unlink","err","code","log","error","fetchAndroidUploadCertAsync","uploadKeyFilename","uploadKeyPath","exportCertBase64"],"mappings":"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","sourcesContent":["import path from 'path';\nimport fs from 'fs-extra';\n\nimport { AndroidCredentials } from '@expo/xdl';\nimport invariant from 'invariant';\nimport { DownloadKeystore } from '../../credentials/views/AndroidCredentials';\nimport { Context } from '../../credentials';\n\nimport log from '../../log';\n\nasync function maybeRenameExistingFile(projectDir: string, filename: string) {\n  let desiredFilePath = path.resolve(projectDir, filename);\n\n  if (await fs.pathExists(desiredFilePath)) {\n    let num = 1;\n    while (await fs.pathExists(path.resolve(projectDir, `OLD_${num}_${filename}`))) {\n      num++;\n    }\n    log(\n      `\\nA file already exists at \"${desiredFilePath}\"\\n  Renaming the existing file to OLD_${num}_${filename}\\n`\n    );\n    await fs.rename(desiredFilePath, path.resolve(projectDir, `OLD_${num}_${filename}`));\n  }\n}\n\nexport async function fetchAndroidKeystoreAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n\n  const keystoreFilename = `${ctx.manifest.slug}.jks`;\n  await maybeRenameExistingFile(projectDir, keystoreFilename);\n  const backupKeystoreOutputPath = path.resolve(projectDir, keystoreFilename);\n\n  invariant(ctx.manifest.slug, 'app.json slug field must be set');\n  const view = new DownloadKeystore(ctx.manifest.slug as string);\n  await view.fetch(ctx);\n  await view.save(ctx, backupKeystoreOutputPath, true);\n}\n\nexport async function fetchAndroidHashesAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n  const outputPath = path.resolve(projectDir, `${ctx.manifest.slug}.tmp.jks`);\n  try {\n    invariant(ctx.manifest.slug, 'app.json slug field must be set');\n    const view = new DownloadKeystore(ctx.manifest.slug as string);\n    await view.fetch(ctx);\n    await view.save(ctx, outputPath);\n\n    await AndroidCredentials.logKeystoreHashes({\n      keystorePath: outputPath,\n      // @ts-ignore keystorePassword can not be undefined\n      keystorePassword: view.credentials?.keystorePassword,\n      // @ts-ignore keyAlias can not be undefined\n      keyAlias: view.credentials?.keyAlias,\n    });\n    log(\n      `\\nNote: if you are using Google Play signing, this app will be signed with a different key after publishing to the store, and you'll need to use the hashes displayed in the Google Play console.`\n    );\n  } finally {\n    try {\n      fs.unlink(outputPath);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n\nexport async function fetchAndroidUploadCertAsync(projectDir: string): Promise<void> {\n  const ctx = new Context();\n  await ctx.init(projectDir);\n\n  const keystorePath = path.resolve(projectDir, `${ctx.manifest.slug}.tmp.jks`);\n\n  const uploadKeyFilename = `${ctx.manifest.slug}_upload_cert.pem`;\n  await maybeRenameExistingFile(projectDir, uploadKeyFilename);\n  const uploadKeyPath = path.resolve(projectDir, uploadKeyFilename);\n\n  try {\n    invariant(ctx.manifest.slug, 'app.json slug field must be set');\n    const view = new DownloadKeystore(ctx.manifest.slug as string);\n    await view.fetch(ctx);\n    await view.save(ctx, keystorePath);\n\n    log(`Writing upload key to ${uploadKeyPath}`);\n    await AndroidCredentials.exportCertBase64(\n      {\n        keystorePath,\n        // @ts-ignore keystorePassword can not be undefined\n        keystorePassword: view.credentials?.keystorePassword,\n        // @ts-ignore keyAlias can not be undefined\n        keyAlias: view.credentials?.keyAlias,\n      },\n      uploadKeyPath\n    );\n  } finally {\n    try {\n      await fs.unlink(keystorePath);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        log.error(err);\n      }\n    }\n  }\n}\n"],"file":"android.js"}